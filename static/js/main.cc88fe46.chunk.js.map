{"version":3,"sources":["AddEntry.jsx","ToDoList.jsx","App.js","reportWebVitals.js","index.js"],"names":["AddEntry","props","textInput","React","createRef","submitEntry","inputEntry","current","value","className","role","onClick","console","log","ref","type","id","placeholder","onKeyDown","e","key","ToDoList","filterView","filterType","items","length","filter","tabIndex","updateFilter","item","completed","map","index","markEntryComplete","readOnly","checked","width","height","viewBox","fill","xmlns","d","name","deleteEntry","fillOpacity","deleteCompleted","App","useState","setItems","setFilter","addItem","totalItems","splice","tempItems","newFilter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc88fe46.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./AddEntry.scss\";\r\n\r\nconst AddEntry = (props) => {\r\n\r\n    //create Ref to textInput to momintor and change input field as needed \r\n    let textInput = React.createRef();\r\n\r\n    //save new to do to state\r\n    const submitEntry = () => {\r\n        props.inputEntry(textInput.current.value);\r\n        textInput.current.value = null;\r\n    }\r\n\r\n    //grab to do with enter key\r\n    const keyEntry = (event) => {\r\n        if (event.key === 'Enter') {\r\n            console.log('do validate');\r\n            submitEntry();\r\n        }\r\n    }\r\n\r\n    //grab to do via mouse click on button\r\n    const clickEntry = () => {\r\n        console.log(textInput.current.value);\r\n        if (textInput.current.value !== \"\" || textInput.current.value !== \"\") {\r\n            console.log('do validate (button)');\r\n            submitEntry();\r\n        } else {\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"entry-container\">\r\n            <div className=\"circle-box\" role=\"button\" onClick={() => clickEntry()}></div>\r\n            <input\r\n                ref={textInput}\r\n                className=\"todo-input\"\r\n                type=\"text\"\r\n                id=\"new-todo\"\r\n                placeholder=\"Create a new Item...\"\r\n                onKeyDown={e => keyEntry(e)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddEntry;","import React from \"react\";\r\nimport \"./ToDoList.scss\";\r\n\r\nconst ToDoList = (props) => {\r\n\r\n    //filter view that highlights active filter and updates filter accordingly \r\n    const filterView = (filterType) => (\r\n        <div className={ props.items.length <= 0 ? \"hidden\" : filterType}>\r\n            <div className={`action-button ${props.filter === null ? \"highlight\" : \"\"}`} tabIndex=\"0\" role=\"button\" onClick={() => props.updateFilter(null)}>All</div>\r\n            <div className={`action-button ${props.filter === false ? \"highlight\" : \"\"}`} tabIndex=\"0\" role=\"button\" onClick={() => props.updateFilter(false)}>Active</div>\r\n            <div className={`action-button ${props.filter === true ? \"highlight\" : \"\"}`} tabIndex=\"0\" role=\"button\" onClick={() => props.updateFilter(true)}>Completed</div>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"list-container\">\r\n                { props.items.length <= 0 ?\r\n                <p>You currently don't have anything in your To Do List.</p>\r\n                :\r\n                <ul className=\"list\">\r\n                    {props.items.filter(item => {\r\n                        //filter through items according to selected filter\r\n                        if (props.filter === null) return item;\r\n                        return props.filter === item.completed;\r\n                    }).map((item, index) => (\r\n                        <li className=\"list-item\" key={index}>\r\n                            <span className=\"completed-checkbox\" onClick={() => props.markEntryComplete(index)}>\r\n                                <input type=\"checkbox\" readOnly checked={item.completed}></input>\r\n                                <span>\r\n                                    <svg className=\"checkmark\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                    <path d=\"M6.75 12.1275L3.62249 9L2.5575 10.0575L6.75 14.25L15.75 5.25L14.6925 4.1925L6.75 12.1275Z\" fill=\"none\"/>\r\n                                    </svg>\r\n                                </span>\r\n                            </span>\r\n                            <span className={`item-name ${item.completed ? \"strike-through\" : ''}`}>{item.name}</span>\r\n                            <div tabIndex=\"0\" role=\"button\" onClick={() => props.deleteEntry(index)}>\r\n                                <svg className=\"icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                    <path d=\"M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z\" fill=\"white\" fillOpacity=\"0.2\"/>\r\n                                </svg>\r\n                            </div>\r\n                        </li>\r\n                    ))}\r\n                    <li className=\"list-item\" id=\"\">\r\n                        <span className=\"item-count\">{props.items.filter(item => !item.completed).length} items left</span>\r\n                        {filterView(\"desktop-filters\")}\r\n                        <div className=\"action-button clear\" tabIndex=\"0\" role=\"button\" onClick={props.deleteCompleted}>Clear Completed</div>\r\n                    </li>\r\n                </ul>\r\n                }\r\n            </div>\r\n            {filterView(\"mobile-filters\")}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoList;","import './App.scss';\r\nimport AddEntry from './AddEntry.jsx';\r\nimport ToDoList from './ToDoList.jsx';\r\nimport { useState } from 'react';\r\n\r\nconst App = () => {\r\n  const [items, setItems] = useState([]);\r\n  const [filter, setFilter] = useState(null);\r\n\r\n  const inputEntry = addItem => {\r\n    //grab input from input field and save to items Array\r\n    setItems(items => [...items, {\"name\" : addItem, \"completed\" : false}]);\r\n  };\r\n\r\n  const deleteEntry = index => {\r\n    // when X is pressed, will delete entry from list\r\n    let tempItems = items;\r\n    tempItems.splice(index, 1);\r\n    setItems(tempItems => [...tempItems]);\r\n  };\r\n\r\n  const deleteCompleted = () => {\r\n    // This will clear all completed Entries\r\n    let tempItems = items.filter(item => item.completed === false);\r\n    setItems(tempItems);\r\n  };\r\n\r\n  const markEntryComplete = index => {\r\n    // Clicking the checkbox will strike through the text to mark the entry \"complete\"\r\n    const tempItems = items.map((item, id) => {\r\n      return index === id ? { ...item, completed: !item.completed }: item\r\n    });\r\n\r\n    setItems(tempItems);\r\n  };\r\n\r\n  // save filter to state\r\n  const updateFilter = newFilter => {\r\n    setFilter(newFilter);\r\n    // if (newFilter === null || newFilter === undefined) console.log(\"filter: Show All\", filter);\r\n    // if (newFilter === true) console.log(\"filter: Completed\", filter);\r\n    // if (newFilter === false) console.log(\"filter: Still to Do\", filter);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"header\" />\r\n      <div className=\"app-container\">\r\n        <p className=\"title\">TODO</p>\r\n        <AddEntry inputEntry={inputEntry}/>\r\n        <ToDoList\r\n          items={items}\r\n          totalItems={items.length}\r\n          deleteEntry={deleteEntry}\r\n          deleteCompleted={deleteCompleted}\r\n          markEntryComplete={markEntryComplete}\r\n          updateFilter={updateFilter}\r\n          filter={filter}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}